{"version":3,"sources":["components/form/Label.module.scss","components/form/Label.js","components/form/fields/CodeField.js","components/form/fields/helpers.js","utils/document.js","components/form/Field.js","components/form/constants.js","containers/guided-form/fields.js","containers/guided-form/GuidedForm.js","App.js","serviceWorker.js","index.js","components/form/fields/CodeField.module.scss","containers/guided-form/GuidedForm.module.scss"],"names":["module","exports","React","memo","children","className","classes","label","CodeField","name","config","validation","error","control","maxLength","register","getValues","setValue","inputs","useMemo","size","Array","map","_","index","id","generateInputs","focusField","useCallback","ref","fieldsRef","current","focus","formatValue","value","removedSpaces","replace","substr","length","normalizeAndSlice","normalizedValue","rest","shouldValidate","deleteValue","handleKeyDown","event","key","setTimeout","document","activeElement","setSelectionRange","handleChange","target","type","htmlFor","autoComplete","cx","input","valid","onKeyDown","onChange","Field","fields","required","pattern","GuidedForm","useForm","mode","handleSubmit","errors","formState","reset","container","onSubmit","data","console","log","digit","join","button","disabled","isValid","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3b73b606.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Label_label__22e0I\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classes from \"./Label.module.scss\";\n\nfunction Label({ children }) {\n  return <label className={classes.label}>{children}</label>;\n}\n\nLabel.propTypes = {\n  children: PropTypes.string.isRequired,\n};\n\nexport default React.memo(Label);\n","import React, { useCallback, useMemo } from \"react\";\nimport cx from \"classnames\";\nimport { resetCursor } from \"../../../utils/document\";\nimport Label from \"../Label\";\nimport classes from \"./CodeField.module.scss\";\nimport { generateInputs, normalizeAndSlice } from \"./helpers\";\n\nconst DEFAULT_MAX_LENGTH = 1;\n\nfunction CodeField({ label, name, config, validation, error, control }) {\n  const { maxLength = DEFAULT_MAX_LENGTH } = validation;\n  const { register, getValues, setValue } = control;\n\n  const inputs = useMemo(() => generateInputs(name, config.size), [\n    config,\n    name,\n  ]);\n\n  const focusField = useCallback(\n    (id) => {\n      const name = inputs[id]?.name;\n      const ref = control.fieldsRef.current[name]?.ref;\n      if (ref) {\n        ref.focus();\n      }\n    },\n    [inputs, control]\n  );\n\n  const formatValue = useCallback(\n    (id, value) => {\n      const name = inputs[id]?.name;\n      const [normalizedValue, rest] = normalizeAndSlice(value, maxLength) || [\n        value,\n      ];\n      if (name && normalizedValue) {\n        setValue(name, normalizedValue, {\n          shouldValidate: true,\n        });\n        focusField(id);\n        if (rest) {\n          formatValue(id + 1, rest);\n        }\n      }\n    },\n    [inputs, maxLength, setValue, focusField]\n  );\n\n  const deleteValue = useCallback(\n    (id) => {\n      const name = inputs[id]?.name;\n      setValue(name, \"\", {\n        shouldValidate: true,\n      });\n      focusField(id + 1);\n    },\n    [focusField, inputs, setValue]\n  );\n\n  const handleKeyDown = (id, name) => (event) => {\n    if (event.key === \"Backspace\" && inputs?.[id - 1]) {\n      setTimeout(() => !getValues(name) && focusField(id - 1));\n    } else if (event.key === \"Delete\") {\n      deleteValue(id);\n      setTimeout(() => resetCursor());\n    }\n  };\n\n  const handleChange = (id) => (event) => {\n    const { value } = event.target;\n    if (!error?.[id] || error?.[id]?.type === \"pattern\") {\n      focusField(id + 1);\n    }\n    formatValue(id, value);\n  };\n\n  return (\n    <>\n      <Label htmlFor={name}>{label}</Label>\n      <div>\n        {inputs.map(({ id, name }) => (\n          <input\n            key={name}\n            ref={register(validation)}\n            name={name}\n            type=\"tel\"\n            autoComplete=\"off\"\n            className={cx(classes.input, {\n              [classes.valid]: getValues(name) && !error?.[id],\n              [classes.error]: error?.[id],\n            })}\n            onKeyDown={handleKeyDown(id, name)}\n            onChange={handleChange(id, name)}\n          />\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default CodeField;\n","export const normalizeAndSlice = (value, maxLength) => {\n  const removedSpaces = value.replace(/\\s/g, \"\");\n  return [\n    removedSpaces?.substr(0, maxLength),\n    removedSpaces?.substr(maxLength, removedSpaces.length),\n  ];\n};\n\nexport const generateInputs = (name, size) =>\n  [...Array(size)].map((_, index) => ({\n    id: index,\n    name: `${name}[${index}]`,\n  }));\n","export const resetCursor = () => {\n  document.activeElement.setSelectionRange(0, 0);\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport CodeField from \"./fields/CodeField\";\nimport { CODE_FIELD } from \"./constants\";\n\nfunction Field({ type, ...config }) {\n  switch (type) {\n    case CODE_FIELD:\n      return <CodeField {...config} />;\n\n    default:\n      return null;\n  }\n}\n\nField.propTypes = {\n  type: PropTypes.string.isRequired,\n};\n\nexport default Field;\n","export const CODE_FIELD = \"CODE_FIELD\";\n","import { CODE_FIELD } from \"../../components/form/constants\";\n\nexport const NUMBER_OF_DIGITS = 6;\n\nconst fields = [\n  {\n    label: \"Numeric Code\",\n    name: \"digit\",\n    type: CODE_FIELD,\n    config: {\n      size: NUMBER_OF_DIGITS,\n    },\n    validation: {\n      required: true,\n      maxLength: 1,\n      pattern: /\\d/,\n    },\n  },\n];\n\nexport default fields;\n","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport Field from \"../../components/form/Field\";\nimport classes from \"./GuidedForm.module.scss\";\nimport fields from \"./fields\";\n\nfunction GuidedForm() {\n  const { handleSubmit, errors, formState, reset, control } = useForm({\n    mode: \"onChange\",\n  });\n\n  const onSubmit = (data) => {\n    console.log(\"Digit:\", data.digit?.join(\"\"));\n    const ref = control.fieldsRef.current[\"digit[0]\"]?.ref;\n    if (ref) {\n      ref.focus();\n    }\n    reset();\n  };\n\n  return (\n    <div className={classes.container}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        {fields.map((config) => (\n          <Field\n            key={config.name}\n            error={errors?.[config.name]}\n            control={control}\n            {...config}\n          />\n        ))}\n        <button\n          type=\"submit\"\n          className={classes.button}\n          disabled={!formState.isValid}\n        >\n          Send\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default GuidedForm;\n","import React from \"react\";\nimport GuidedForm from \"./containers/guided-form/GuidedForm\";\n\nfunction App() {\n  return <GuidedForm />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"CodeField_input__1FRkn\",\"valid\":\"CodeField_valid__LcwFV\",\"error\":\"CodeField_error__zOoxj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"GuidedForm_container__2naks\",\"button\":\"GuidedForm_button__3lkIY\"};"],"sourceRoot":""}